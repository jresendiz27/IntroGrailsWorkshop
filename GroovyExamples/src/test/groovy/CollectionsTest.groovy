/*
 * This Spock specification was auto generated by running the Gradle 'init' task
 * by 'jresendiz' at '3/20/17 6:14 PM' with Gradle 3.0
 *
 * @author jresendiz, @date 3/20/17 6:14 PM
 */


import com.nearsoft.ws.groovy.CollectionsExamples
import spock.lang.Specification

import java.lang.Void as Should

class CollectionsTest extends Specification {

    CollectionsExamples collectionsExamples;

    def setup() {
        collectionsExamples = new CollectionsExamples()
    }

    Should "count all the artists contained in the json file"() {
        when:
        def result = collectionsExamples.countAllArtistsFromJson()
        then:
        result >= 0
    }

    Should "count all the artists contained in the xml file"() {
        setup:
        collectionsExamples = new CollectionsExamples()
        when:
        def result = collectionsExamples.countAllArtistsFromXMl()
        then:
        result >= 0
    }

    Should "get all artists names from the JSON file"() {
        setup:
        collectionsExamples = new CollectionsExamples()
        when:
        def result = collectionsExamples.getArtistsNamesFromJson()
        then:
        result == ['Barot Bellingham', 'Jonathan G. Ferrar II', 'Hillary Hewitt Goldwynn-Post', 'Hassum Harrod', 'Jennifer Jerome', 'LaVonne L. LaRue', 'Constance Olivia Smith', 'Riley Rudolph Rewington', 'Xhou Ta']
    }

    Should "get all artists names from the Xml file"() {
        setup:
        collectionsExamples = new CollectionsExamples()
        when:
        def result = collectionsExamples.getArtistsNamesFromXML()
        then:
        result == ['Barot Bellingham(XML)', 'Jonathan G. Ferrar II(XML)', 'Hillary Hewitt Goldwynn-Post(XML)', 'Hassum Harrod(XML)', 'Jennifer Jerome(XML)', 'LaVonne L. LaRue(XML)', 'Constance Olivia Smith(XML)', 'Riley Rudolph Rewington(XML)', 'Xhou Ta(XML)']
    }

    Should "generate a csv file from the JSON content"() {
        setup:
        collectionsExamples = new CollectionsExamples()
        File testCsvFile = new File("Artists.csv")
        when:
        def result = collectionsExamples.generateCSVFile()
        then:
        result != null
        result.text == testCsvFile.text
        cleanup:
        result.delete()
    }

}
